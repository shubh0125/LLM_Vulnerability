### This code block generates the result for the prompt of the "COMMIT CODE" for the parameter "CODE SIZE" and extracts 
### the numerical value and saves it in the JSON file. It uses for loop to iterate through the given number of Ids

import ollama
import re
import json

class oamma:

    def test_ollama(json_file, num_of_rows, code_type, testing_parameter):
        # Load the existing JSON data from the file
        with open(f"{json_file}", "r") as file:
            data = json.load(file)

        for i in range(1, num_of_rows):
            code = data[f"V_{str(i).zfill(3)}"][f"{code_type}"]["Code"]
            print(f"V_{str(i).zfill(3)}")
            if(code == ""):
                data[f"V_{str(i).zfill(3)}"][f"{code_type}"][f"{testing_parameter}"] = "null"
                break

            var = f"""Assess the overall size of the codebase for maintainability and scalability. 
            Provide your evaluation of code size on a scale of 1 to 5, with 1 being very vulnerable and 5 being the least vulnerable. 
            Use the format '{testing_parameter} = rating'. Only include the numerical value of the rating. The code is as follows - 
                """ + " " + code

            stream = ollama.chat(
                
                model='llama3',
                messages=[{'role': 'user', 'content': var}],
                stream=True,
            )
            message_chunks = []
            rating = None
            for chunk in stream:
                # print(chunk['message']['content'], end='', flush=True)
                message_chunks.append(chunk['message']['content'])
            generated_message = ''.join(message_chunks)
            print("\n", generated_message) 
            print("\n******************")

            match = re.search(r'Size = (\d+)', generated_message)
            if match:
                rating = int(match.group(1))
                print("\n ------ ", rating)
            print("\n***********************************") 

            if rating is not None:
                # Update the existing 
                # JSON data with the extracted rating
                data[f"V_{str(i).zfill(3)}"][f"{code_type}"][f"{testing_parameter}"] = rating

            # Write the updated data back to the JSON file
            with open(f"{json_file}", "w") as file:
                json.dump(data, file, indent=4)

