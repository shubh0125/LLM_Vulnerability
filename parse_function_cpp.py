import re


class parse_function_cpp: 

    def read_cpp_file(file_path):
        with open(file_path, 'r') as file:
            content = file.read()
        return content



    def find_function_extent(content, function_name):
        # Regex pattern to find the function declaration and capture the signature
        pattern = re.compile(r'\b' + re.escape(function_name) + r'\s*\(([^)]*)\)\s*\{')
        match = pattern.search(content)
        
        if not match:
            return None  # Function not found
        
        start_pos = match.start()
        parameters = match.group(1)  # Content between '(' and ')'
        
        # Initialize counters for braces
        open_braces = 0
        close_braces = 0
        function_start = None
        function_end = None
        
        for i in range(start_pos, len(content)):
            if content[i] == '{':
                if open_braces == 0:
                    function_start = i
                open_braces += 1
            elif content[i] == '}':
                close_braces += 1
            
            # When open and close braces match, the function has ended
            if open_braces > 0 and open_braces == close_braces:
                function_end = i
                break
        
        if function_start is not None and function_end is not None:
            function_body = content[function_start:function_end+1]
            # Combine the function name, parameters, and body to form the complete function
            complete_function = f"{function_name}({parameters}){function_body}"
            # print(complete_function)
            return complete_function
        else:
            return None  # Function end not found
