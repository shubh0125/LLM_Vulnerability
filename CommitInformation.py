import requests
import time
import random



# GitHub API base URL
GITHUB_API_URL = "https://api.github.com"

class CommitInformation:

    @staticmethod
    def get_commit_details(owner, repo, commit_hash, token):
        url = f"{GITHUB_API_URL}/repos/{owner}/{repo}/commits/{commit_hash}"
        headers = {
            "Authorization": f"token {token}"
        }
        response = requests.get(url, headers=headers)
        if response.status_code == 200:
            return response.json()
        else:
            raise Exception(f"Error fetching commit details: {response.status_code} - {response.text}")

    @staticmethod
    def get_tree(owner, repo, tree_sha, token):
        url = f"{GITHUB_API_URL}/repos/{owner}/{repo}/git/trees/{tree_sha}?recursive=1"
        headers = {
            "Authorization": f"token {token}"
        }
        response = requests.get(url, headers=headers)
        if response.status_code == 200:
            return response.json()
        else:
            raise Exception(f"Error fetching tree: {response.status_code} - {response.text}")

    @staticmethod
    def get_file_content(owner, repo, file_sha, token):
        url = f"{GITHUB_API_URL}/repos/{owner}/{repo}/git/blobs/{file_sha}"
        headers = {
            "Authorization": f"token {token}",
            "Accept": "application/vnd.github.v3.raw"
        }
        response = requests.get(url, headers=headers)
        if response.status_code == 200:
            return response.text
        else:
            raise Exception(f"Error fetching file content: {response.status_code} - {response.text}")

    @staticmethod
    def find_file_in_tree(tree, file_path):
        for item in tree['tree']:
            if item['path'] == file_path:
                return item['sha']
        return None

    @staticmethod
    def view_file_in_commit(owner, repo, commit_hash, file_path, token):
        commit_details = CommitInformation.get_commit_details(owner, repo, commit_hash, token)
        tree_sha = commit_details['commit']['tree']['sha']
        tree = CommitInformation.get_tree(owner, repo, tree_sha, token)
        file_sha = CommitInformation.find_file_in_tree(tree, file_path)
        if file_sha:
            return CommitInformation.get_file_content(owner, repo, file_sha, token)
        else:
            return None

    @staticmethod
    def get_previous_commit(owner, repo, commit_hash, token):
        commit_details = CommitInformation.get_commit_details(owner, repo, commit_hash, token)
        parents = commit_details.get('parents', [])
        if not parents:
            return None  # This is the initial commit
        # Assuming linear history, we take the first parent
        return parents[0]['sha']
    



### This function is IMPORTANT and is called for every Vulnerable Commit Hash and Neutral Commit Hash to extract Commit INFORMATION using 'Commit SHA'
#### , 'file path' , ' owner' and name of Repository. 
    def get_file_information(owner, repo, commit_sha, file_path, token):
        MAX_RETRIES = 5

        # time.sleep(random.uniform(1, 2))
        url = f'https://api.github.com/repos/{owner}/{repo}/commits/{commit_sha}'
        headers = {'Authorization': f'Bearer {token}'}

        for retry in range(MAX_RETRIES):
            response = requests.get(url, headers=headers)
            
            if response.status_code == 200:
                commit_data = response.json()
                files = commit_data.get('files', [])
                for file in files:
                    if file['filename'] == file_path:
                        return file
                print(f"File '{file_path}' not found in commit '{commit_sha}'.")
                return "None"  # Return None when file not found
            
            elif response.status_code == 403:  # Rate limit exceeded
                print("Rate limit exceeded. Retrying...")
                time.sleep(random.uniform(1, 2))  # Random sleep between 1 to 15 seconds
                
            
            else:
                print(f"Error: Unable to retrieve commit data. Status code: {response.status_code}")
                return (f"Error: Unable to retrieve commit data. Status code: {response.status_code}")

        print("Max retries reached. Unable to fetch commit information.")
        return None
    

    
    # ## This code helps find the FILE INFORMATION using commit sha, file path, owner and repository name.  (THIS CODE IS COMMENTED AS A NEW VERSION IS MADE 
    # ## AND CAN BE LATER USED FOR TESTING)
    @staticmethod
    def get_file_information_without_token(owner, repo, commit_sha, file_path):
        MAX_RETRIES = 5

        time.sleep(random.uniform(1, 2))
        url = f'https://api.github.com/repos/{owner}/{repo}/commits/{commit_sha}'

        for retry in range(MAX_RETRIES):
            response = requests.get(url)
            
            if response.status_code == 200:
                commit_data = response.json()
                files = commit_data.get('files', [])
                for file in files:
                    if file['filename'] == file_path:
                        return file
                print(f"File '{file_path}' not found in commit '{commit_sha}'.")
                break  # No need to retry if file not found
            
            elif response.status_code == 403:  # Rate limit exceeded
                print("Rate limit exceeded. Retrying...")
                time.sleep(random.uniform(1, 2))  # Random sleep between 1 to 15 seconds
                
            
            else:
                print(f"Error: Unable to retrieve commit data. Status code: {response.status_code}")
                return (f"Error: Unable to retrieve commit data. Status code: {response.status_code}")

        print("Max retries reached. Unable to fetch commit information.")
        return None
